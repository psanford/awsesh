package u2f

import (
	"crypto/sha256"
	"encoding/hex"
	"testing"

	"github.com/flynn/u2f/u2ftoken"
)

// 2021/02/23 14:34:20 registered: 0504ec92fe2a034d7564a1fc78f57609bbf69f2d6037784dc6da01b0436c8090a38850ebf35d12743036c7c0ded17a185e243fe7ebaed8b5b36e70035c46c246988440485a13c5fbceefeee8b71bf09f67d1115b3ca17bc6109d4c8a023e706e2e4f163ce9905b7e11155213c447b50919493decb99e1479ec1d7ea6673ef6ac1a2a98308202ac30820194a00302010202042403b72b300d06092a864886f70d01010b0500302e312c302a0603550403132359756269636f2055324620526f6f742043412053657269616c203435373230303633313020170d3134303830313030303030305a180f32303530303930343030303030305a306e310b300906035504061302534531123010060355040a0c0959756269636f20414231223020060355040b0c1941757468656e74696361746f72204174746573746174696f6e3127302506035504030c1e59756269636f205532462045452053657269616c203630343232333237353059301306072a8648ce3d020106082a8648ce3d030107034200043f3d6bb53f02d5ef9aa271549ee8e4a6662c86215f0c252779d35c83388c4740ba8f2d004e5d6f14902e5c0b69f346c54163782e12a0fc05f7999749f4bf2c1ca35b3059302206092b0601040182c40a020415312e332e362e312e342e312e34313438322e312e353013060b2b0601040182e51c020101040403020520301006092b0601040182c40a0c0403020103300c0603551d130101ff04023000300d06092a864886f70d01010b050003820101007dc61eae9e8299f09aaac4c090132e5688d1a0d1799581d940716ef9e14c093f31c2a21a557e4227e29e66aaa2a3253b5ac017f47b305079338bbb7060e3997fc9355444722e0ba0d9eb94e55605aa9f1c3003c96128f993ee3d1d5c8206e8ca722ee875220c71255617c34ece5ff00f9bbdb9090863c4850350701e816d3bf52f1b477e031974b080bbe37e05c6f2fcbfc1f8d9739726b41dac1c471854aab55fb840fb496ac3fef8920d97acc901179226be49a08164635ca22cd0cbcab019b64c316a49478c6f72a4da938d5f353b9b10c5bac90869bc5e17e021f60f84b498d0d6d5e850edec6f2316871716af190deff6340a89d07ab824925fc91a88313046022100ac2ac3ad0e4b34e2d10622fdd9fce06efa8c7369ee4fdee384ad229c681841eb022100c6f9363e03e4211af40e71041ec5a689e9078040a2d9693543ad9f2ed21a1b68
// 2021/02/23 14:34:20 reconnecting to device in 3 seconds...
// 2021/02/23 14:34:23 authenticating, provide user presence
// 2021/02/23 14:34:24 counter = 54, challenge = c928bb2f8656d5ec53e345ebeca3f5dc3d43ba8fc0b1018a48827e0fa3f8bd20 signature = 30450220532f7eb5817ddb395dd6df966c883161ca1653586d422aba01a8242fde895ece022100c8cfe8a1316740a15b7311f6f981ef202ec69d11b7b43a242a269271938132c8

func TestU2F(t *testing.T) {
	regBytes, err := hex.DecodeString("0504ec92fe2a034d7564a1fc78f57609bbf69f2d6037784dc6da01b0436c8090a38850ebf35d12743036c7c0ded17a185e243fe7ebaed8b5b36e70035c46c246988440485a13c5fbceefeee8b71bf09f67d1115b3ca17bc6109d4c8a023e706e2e4f163ce9905b7e11155213c447b50919493decb99e1479ec1d7ea6673ef6ac1a2a98308202ac30820194a00302010202042403b72b300d06092a864886f70d01010b0500302e312c302a0603550403132359756269636f2055324620526f6f742043412053657269616c203435373230303633313020170d3134303830313030303030305a180f32303530303930343030303030305a306e310b300906035504061302534531123010060355040a0c0959756269636f20414231223020060355040b0c1941757468656e74696361746f72204174746573746174696f6e3127302506035504030c1e59756269636f205532462045452053657269616c203630343232333237353059301306072a8648ce3d020106082a8648ce3d030107034200043f3d6bb53f02d5ef9aa271549ee8e4a6662c86215f0c252779d35c83388c4740ba8f2d004e5d6f14902e5c0b69f346c54163782e12a0fc05f7999749f4bf2c1ca35b3059302206092b0601040182c40a020415312e332e362e312e342e312e34313438322e312e353013060b2b0601040182e51c020101040403020520301006092b0601040182c40a0c0403020103300c0603551d130101ff04023000300d06092a864886f70d01010b050003820101007dc61eae9e8299f09aaac4c090132e5688d1a0d1799581d940716ef9e14c093f31c2a21a557e4227e29e66aaa2a3253b5ac017f47b305079338bbb7060e3997fc9355444722e0ba0d9eb94e55605aa9f1c3003c96128f993ee3d1d5c8206e8ca722ee875220c71255617c34ece5ff00f9bbdb9090863c4850350701e816d3bf52f1b477e031974b080bbe37e05c6f2fcbfc1f8d9739726b41dac1c471854aab55fb840fb496ac3fef8920d97acc901179226be49a08164635ca22cd0cbcab019b64c316a49478c6f72a4da938d5f353b9b10c5bac90869bc5e17e021f60f84b498d0d6d5e850edec6f2316871716af190deff6340a89d07ab824925fc91a88313046022100ac2ac3ad0e4b34e2d10622fdd9fce06efa8c7369ee4fdee384ad229c681841eb022100c6f9363e03e4211af40e71041ec5a689e9078040a2d9693543ad9f2ed21a1b68")
	if err != nil {
		t.Fatal(err)
	}

	rr, err := parseRegisterResponse(regBytes)
	if err != nil {
		t.Fatal(err)
	}

	counter := uint32(54)
	challenge, err := hex.DecodeString("c928bb2f8656d5ec53e345ebeca3f5dc3d43ba8fc0b1018a48827e0fa3f8bd20")
	if err != nil {
		t.Fatal(err)
	}
	sigBytes, err := hex.DecodeString("30450220532f7eb5817ddb395dd6df966c883161ca1653586d422aba01a8242fde895ece022100c8cfe8a1316740a15b7311f6f981ef202ec69d11b7b43a242a269271938132c8")
	if err != nil {
		t.Fatal(err)
	}

	authResp := u2ftoken.AuthenticateResponse{
		Counter:   counter,
		Signature: sigBytes,
	}

	isValid := VerifySignature(rr.PublicKey(), challenge, &authResp)
	if !isValid {
		t.Fatal("Invalid signature")
	}

	invalidChallenge := sha256.Sum224([]byte("invalid challenge"))

	isValid = VerifySignature(rr.PublicKey(), invalidChallenge[:], &authResp)
	if isValid {
		t.Fatal("Expected signature verification to fail but it passed")
	}
}
